import { NextRequest, NextResponse } from 'next/server'

export async function POST (req: NextRequest) {
  const { message } = await req.json()
  console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message)

  try {
    const response = await fetch(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
          'HTTP-Referer': 'http://localhost:3000',
          'X-Title': 'MyChatApp'
        },
        body: JSON.stringify({
          model: 'meta-llama/llama-3.1-405b-instruct:free',
          messages: [
            {
              role: 'system',
              content: '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.'
            },
            {
              role: 'user',
              content: message
            }
          ]
        })
      }
    )

    // –õ–æ–≥ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenRouter:', response.status)

    const text = await response.text()
    console.log('üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', text)

    const data = JSON.parse(text)
    return NextResponse.json(data)
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter:', err)
    return NextResponse.json({
      error: '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.'
    })
  }
}
